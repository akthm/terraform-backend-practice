name: Terraform CI

on:
  push:
    branches: [ main ]
    paths: [ "terraform/infra/*.tf", "backend.hcl" ]
  pull_request:
    branches: [ main ]
    paths: [ "terraform/infra/*.tf", "backend.hcl" ]
  workflow_dispatch:


jobs:
  plan_apply:
    runs-on: [self-hosted]   # or [self-hosted, ec2] if you use a custom label
    defaults:
      run:
        working-directory: terraform/infra
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: terraform/infra/
          sparse-checkout-cone_mode: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Debug AWS identity & perms
        run: |
          
          set -euo pipefail
          echo "=== Identity ==="
          aws sts get-caller-identity

          echo "=== Node & TF versions (sanity) ==="
          node -v || true
          terraform -version

          BUCKET="akthmbucketdevterraform"
          PREFIX="terraform/infra"
          STATE_ARN="arn:aws:s3:::${BUCKET}/${PREFIX}/terraform.tfstate"
          LOCK_ARN="${STATE_ARN}.tflock"

          echo "=== Bucket policy (if any) ==="
          aws s3api get-bucket-policy --bucket "$BUCKET" --query Policy --output text || echo "(no bucket policy)"

          echo "=== KMS aliases (handy if bucket enforces KMS) ==="
          aws kms list-aliases --output table || true

          echo "=== IAM: list attached & inline policies of this role (best effort) ==="
          ROLE_NAME="$(curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/ | head -n1 || true)"
          if [ -n "$ROLE_NAME" ]; then
            aws iam list-attached-role-policies --role-name "$ROLE_NAME" || true
            aws iam list-role-policies --role-name "$ROLE_NAME" || true
          else
            echo "(Not on EC2 with instance profile; skipping role introspection)"
          fi

          echo "=== IAM policy simulation for S3 ==="
          # You may need iam:SimulatePrincipalPolicy on this role for the lines below.
          ROLE_ARN=$(aws sts get-caller-identity --query Arn --output text | sed 's/:assumed-role\//:role\//; s,/.*$,,' )
          echo "Simulating for principal: $ROLE_ARN"

          # Simulate bucket-level and object-level actions
          aws iam simulate-principal-policy \
            --policy-source-arn "$ROLE_ARN" \
            --action-names s3:GetBucketLocation s3:ListBucket \
            --resource-arns "arn:aws:s3:::${BUCKET}" \
            --context-entries ContextKeyName=s3:prefix,ContextKeyValues="${PREFIX}/*",ContextKeyType=string \
            --output table || true

          # Simulate object puts (state + lockfile) WITHOUT KMS header
          aws iam simulate-principal-policy \
            --policy-source-arn "$ROLE_ARN" \
            --action-names s3:PutObject s3:GetObject s3:DeleteObject \
            --resource-arns "$STATE_ARN" "$LOCK_ARN" \
            --output table || true

          # Simulate object puts WITH SSE-KMS header (if bucket enforces it)
          # Replace the key ARN if using a CMK
          KMS_KEY_ARN="arn:aws:kms:ap-south-1:078681887236:key/REPLACE-ME"
          aws iam simulate-principal-policy \
            --policy-source-arn "$ROLE_ARN" \
            --action-names s3:PutObject \
            --resource-arns "$STATE_ARN" "$LOCK_ARN" \
            --context-entries \
              ContextKeyName=s3:x-amz-server-side-encryption,ContextKeyValues=aws:kms,ContextKeyType=string \
              ContextKeyName=s3:x-amz-server-side-encryption-aws-kms-key-id,ContextKeyValues="$KMS_KEY_ARN",ContextKeyType=string \
            --output table || true

       # Formatting guard (fails PR if files need reformatting)
      - name: Terraform Format (check)
        run: terraform fmt -check -recursive

      #  show the diff for debugging if fmt check fails
      - name: Terraform Format (diff)
        if: failure()                   # only runs if the previous step failed
        run: terraform fmt -diff -recursive

      - name: Terraform Init (S3+DDB backend)
        run: terraform init -backend-config=backend.hcl

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        run: terraform plan -input=false -no-color -out=tfplan

      - name: Terraform Apply
        run: terraform apply tfplan

      - name: Cleanup tfplan file
        if: always()                   
        run: rm -f tfplan 