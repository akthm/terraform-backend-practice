name: Terraform CI

on:
  push:
    branches: [ main ]
    paths: [ "terraform/infra/*.tf", "backend.hcl" ]
  pull_request:
    branches: [ main ]
    paths: [ "terraform/infra/*.tf", "backend.hcl" ]
  workflow_dispatch:


jobs:
  plan_apply:
    runs-on: [self-hosted]   # or [self-hosted, ec2] if you use a custom label
    defaults:
      run:
        working-directory: terraform/infra
    env:
      DEPLOYMENT_ID: ${{ github.run_id }}-${{ github.run_attempt }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: terraform/infra/
          sparse-checkout-cone_mode: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Add deployment tags to Terraform config
        run: |
          cat >> terraform.tfvars <<EOF
          
          # Auto-injected deployment tracking tags
          common_tags = {
            DeploymentID    = "${{ env.DEPLOYMENT_ID }}"
            GitHubRunID     = "${{ github.run_id }}"
            GitHubSHA       = "${{ github.sha }}"
            ManagedBy       = "Terraform-CI"
            AutoDestroy     = "true"
          }
          EOF

       # Formatting guard (fails PR if files need reformatting)
      - name: Terraform Format (check)
        run: terraform fmt -check -recursive

      #  show the diff for debugging if fmt check fails
      - name: Terraform Format (diff)
        if: failure()                   # only runs if the previous step failed
        run: terraform fmt -diff -recursive

      - name: Terraform Init (S3+DDB backend)
        run: terraform init -backend-config=backend.hcl

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        run: terraform plan -input=false -no-color -out=tfplan

      - name: Terraform Apply
        id: apply
        run: terraform apply tfplan
        continue-on-error: true # for cleanup step

      - name: Detect Apply Failure
        if: steps.apply.outcome == 'failure'
        run: |
          echo "::error::Terraform apply failed! Initiating rollback..."
          echo "APPLY_FAILED=true" >> $GITHUB_ENV
      
      - name: Emergency Destroy on Failure
        if: env.APPLY_FAILED == 'true'
        id: emergency_destroy
        run: |
          echo "::warning::Rolling back infrastructure from failed deployment"
          echo "::warning::Deployment ID: ${{ env.DEPLOYMENT_ID }}"
          
          # Attempt destroy with detailed logging
          terraform destroy -auto-approve \
            -var="deployment_id=${{ env.DEPLOYMENT_ID }}" \
            2>&1 | tee destroy.log
          
          DESTROY_EXIT_CODE=${PIPESTATUS[0]}
          
          if [ $DESTROY_EXIT_CODE -eq 0 ]; then
            echo "::notice::Successfully destroyed partially created infrastructure"
          else
            echo "::error::Destroy failed! Manual cleanup may be required"
            echo "DESTROY_FAILED=true" >> $GITHUB_ENV
          fi
          
          exit $DESTROY_EXIT_CODE
        working-directory: ./terraform
        continue-on-error: true

      - name: Fallback AWS Resource Cleanup
        if: env.DESTROY_FAILED == 'true'
        run: |
          echo "::warning::Attempting tag-based resource cleanup"
          
          # This script finds and terminates resources with our deployment tags
          bash scripts/emergency-cleanup.sh "${{ env.DEPLOYMENT_ID }}"
        continue-on-error: true
      
      - name: Report Status
        if: always()
        run: |
          if [ "${{ steps.apply.outcome }}" == "success" ]; then
            echo "::notice::✅ Terraform apply completed successfully"
          elif [ "${{ env.APPLY_FAILED }}" == "true" ] && [ "${{ steps.emergency_destroy.outcome }}" == "success" ]; then
            echo "::warning::⚠️ Apply failed but rollback succeeded - no resources left behind"
          else
            echo "::error::❌ Apply failed and rollback may be incomplete - manual review required"
            exit 1
          fi

      - name: Final Status Check
        if: env.APPLY_FAILED == 'true'
        run: |
          echo "::error::Deployment failed. Infrastructure has been rolled back."
          exit 1

      - name: Cleanup tfplan file
        if: always()                   
        run: rm -f tfplan 