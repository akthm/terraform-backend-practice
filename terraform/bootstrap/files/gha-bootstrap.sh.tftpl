#!/usr/bin/env bash
set -Eeuo pipefail

LOG_DIR="/var/log/gha"
RUNNER_DIR="/opt/actions-runner"
UNIT_NAME="gha-runner.service"
CW_LOG_GROUP="${cw_log_group}"

mkdir -p "$LOG_DIR"
chown ubuntu:ubuntu "$LOG_DIR"
exec > >(tee -a "$LOG_DIR/bootstrap.log") 2>&1

echo "[*] Write /etc/gha.env (values injected by Terraform)…"
cat >/etc/gha.env <<ENV
GH_OWNER=${github_owner}
GH_REPO=${github_repo}
REPO_OR_ORG_PATH=${repo_or_org_path}
SSM_GH_PAT_PARAM=${ssm_github_pat_name}
LABELS=${runner_labels_csv}
ENV
chmod 0644 /etc/gha.env

echo "[*] Ensure AWS CLI v2…"
if ! command -v aws >/dev/null 2>&1; then
  tmpd=$(mktemp -d)
  pushd "$tmpd"
  curl -fsSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o awscliv2.zip
  unzip -q awscliv2.zip
  ./aws/install
  popd
  rm -rf "$tmpd"
fi

echo "[*] Install Docker…"
if ! command -v docker >/dev/null 2>&1; then
  install -m 0755 -d /etc/apt/keyrings
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  chmod a+r /etc/apt/keyrings/docker.gpg
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo $VERSION_CODENAME) stable" \
    | tee /etc/apt/sources.list.d/docker.list > /dev/null
  apt-get update -y
  apt-get install -y docker-ce docker-ce-cli containerd.io
  usermod -aG docker ubuntu || true
  systemctl enable --now docker
fi

echo "[*] Install latest GitHub Actions runner…"
mkdir -p "$RUNNER_DIR"
cd "$RUNNER_DIR"
RUNNER_VERSION=$(curl -fsSL https://api.github.com/repos/actions/runner/releases/latest | jq -r .tag_name | sed 's/^v//')
curl -fsSL -o actions-runner-linux-x64-$${RUNNER_VERSION}.tar.gz \
  https://github.com/actions/runner/releases/download/v$${RUNNER_VERSION}/actions-runner-linux-x64-$${RUNNER_VERSION}.tar.gz
tar xzf actions-runner-linux-x64-$${RUNNER_VERSION}.tar.gz
chown -R ubuntu:ubuntu "$RUNNER_DIR"

echo "[*] Create systemd unit…"
cat >/etc/systemd/system/$${UNIT_NAME} <<'UNIT'
[Unit]
Description=GitHub Actions Runner (ephemeral)
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
WorkingDirectory=/opt/actions-runner
User=ubuntu
Group=ubuntu
EnvironmentFile=/etc/gha.env
ExecStart=/usr/local/bin/runner-loop.sh
ExecStop=/usr/local/bin/runner-stop.sh
Restart=always
RestartSec=5
StandardOutput=append:/var/log/gha/gha-runner.service.log #FallbackLog
StandardError=append:/var/log/gha/gha-runner.service.log

[Install]
WantedBy=multi-user.target
UNIT

echo "[*] Create runner loop script…"
cat >/usr/local/bin/runner-loop.sh <<'LOOP'
#!/usr/bin/env bash
set -Eeuo pipefail

LOG_DIR="/var/log/gha"
RUNNER_DIR="/opt/actions-runner"

while true; do
  echo "[*] Refresh GH PAT + registration token…" | tee -a "$LOG_DIR/runner.log"
  GH_PAT=$(aws ssm get-parameter --name "${ssm_github_pat_name}" --with-decryption --query 'Parameter.Value' --output text)
  REG_TOKEN=$(curl -fsSL -X POST \
    -H "Authorization: Bearer $${GH_PAT}" \
    -H "Accept: application/vnd.github+json" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    "https://api.github.com/${repo_or_org_path}/actions/runners/registration-token" \
    | jq -r .token)

  cd "$RUNNER_DIR"
  ./config.sh remove --token "$${REG_TOKEN}" >/dev/null 2>&1 || true

  if [[ -n "${github_repo}" ]]; then
    URL="https://github.com/${github_owner}/${github_repo}"
  else
    URL="https://github.com/${github_owner}"
  fi

  ./config.sh \
    --url "$${URL}" \
    --token "$${REG_TOKEN}" \
    --name "$(hostname)-$(date +%s)" \
    --labels "$${LABELS}" \
    --unattended \
    --ephemeral

  echo "[*] Runner listening…" | tee -a "$LOG_DIR/runner.log"
  ./run.sh >> "$LOG_DIR/runner.log" 2>&1 || true
  echo "[*] Runner finished; re-registering in 5s…" | tee -a "$LOG_DIR/runner.log"
  sleep 5
done
LOOP
chmod +x /usr/local/bin/runner-loop.sh

echo "[*] Create stop script…"
cat >/usr/local/bin/runner-stop.sh <<'STOP'
#!/usr/bin/env bash
set -Eeuo pipefail
RUNNER_DIR="/opt/actions-runner"
if [[ -x "$${RUNNER_DIR}/config.sh" ]]; then
  GH_PAT=$(aws ssm get-parameter --name "${ssm_github_pat_name}" --with-decryption --query 'Parameter.Value' --output text)
  REG_TOKEN=$(curl -fsSL -X POST \
    -H "Authorization: Bearer $${GH_PAT}" \
    -H "Accept: application/vnd.github+json" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    "https://api.github.com/${repo_or_org_path}/actions/runners/registration-token" \
    | jq -r .token)
  "$${RUNNER_DIR}/config.sh" remove --unattended --token "$${REG_TOKEN}" || true
fi
STOP
chmod +x /usr/local/bin/runner-stop.sh

# echo "[*] Install CloudWatch Agent…"
# mkdir -p /opt/aws/amazon-cloudwatch-agent/etc
# tmpd=$(mktemp -d)
# pushd "$tmpd"
# curl -fsSL -o amazon-cloudwatch-agent.deb https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
# dpkg -i amazon-cloudwatch-agent.deb
# popd
# rm -rf "$tmpd"

# # Discover region for the agent via IMDSv2
# TOKEN=$(curl -fsSL -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
# REGION=$(curl -fsSL -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)

# echo "[*] Write CloudWatch Agent config…"
# cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json <<CWCFG
# {
#   "logs": {
#     "logs_collected": {
#       "files": {
#         "collect_list": [
#           { "file_path": "/var/log/gha/bootstrap.log",       "log_group_name": "${cw_log_group}", "log_stream_name": "{instance_id}/bootstrap" },
#           { "file_path": "/var/log/gha/runner.log",          "log_group_name": "${cw_log_group}", "log_stream_name": "{instance_id}/runner" },
#           { "file_path": "/var/log/cloud-init-output.log",   "log_group_name": "${cw_log_group}", "log_stream_name": "{instance_id}/cloud-init" }
#         ]
#       }
#     },
#     "force_flush_interval": 5
#   },
#   "agent": { "region": "$${REGION}", "debug": false }
# }
# CWCFG

# ============================================================================
# FLUENT BIT INSTALLATION & CONFIGURATION
# ============================================================================
# Fluent Bit is a lightweight log processor that ships logs to CloudWatch
# with much lower latency (~2-5 seconds) compared to CloudWatch Agent (~3 minutes)
# 
# Benefits:
# - Lower memory footprint (~450KB vs 40MB for CW Agent)
# - Near real-time log delivery (2-5 second latency)
# - More efficient batching and compression
# - Better performance under high log volume
# ============================================================================

echo "[*] Install Fluent Bit…"
# Add Fluent Bit GPG key and repository
curl -fsSL https://packages.fluentbit.io/fluentbit.key | gpg --dearmor -o /usr/share/keyrings/fluentbit-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/fluentbit-keyring.gpg] https://packages.fluentbit.io/ubuntu/$(lsb_release -cs) $(lsb_release -cs) main" \
  | tee /etc/apt/sources.list.d/fluent-bit.list

apt-get update -y
apt-get install -y fluent-bit

# Discover AWS region via IMDSv2 for Fluent Bit configuration
TOKEN=$(curl -fsSL -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
REGION=$(curl -fsSL -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)
INSTANCE_ID=$(curl -fsSL -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)

echo "[*] Configure Fluent Bit for CloudWatch Logs…"
# Main Fluent Bit configuration
# Documentation: https://docs.fluentbit.io/manual/
cat > /etc/fluent-bit/fluent-bit.conf <<FLUENTCONF
# ============================================================================
# SERVICE Configuration
# ============================================================================
# Global service configuration for Fluent Bit
# - Flush: How often (seconds) to flush records to output (lower = faster delivery)
# - Log_Level: info, warn, error, debug (use 'info' for production)
# - Parsers_File: Custom parsers for log format detection
# ============================================================================
[SERVICE]
    Flush        2
    Daemon       Off
    Log_Level    info
    Parsers_File parsers.conf

# ============================================================================
# INPUT: Bootstrap Log
# ============================================================================
# Monitors the bootstrap.log file created during instance initialization
# - Name: tail = monitor file for new lines
# - Path: Absolute path to log file
# - Tag: Identifier for routing logs to correct output
# - Refresh_Interval: How often (seconds) to check for new data
# - Read_from_Head: true = read entire file, false = only new lines
# - Skip_Long_Lines: Prevent crashes on extremely long log lines
# ============================================================================
[INPUT]
    Name              tail
    Tag               gha.bootstrap
    Path              /var/log/gha/bootstrap.log
    Refresh_Interval  1
    Read_from_Head    true
    Skip_Long_Lines   On
    Buffer_Max_Size   32k

# ============================================================================
# INPUT: Runner Log
# ============================================================================
# Monitors the runner.log file containing GitHub Actions runner output
# This is typically the highest-volume log and most important for debugging
# ============================================================================
[INPUT]
    Name              tail
    Tag               gha.runner
    Path              /var/log/gha/runner.log
    Refresh_Interval  1
    Read_from_Head    false
    Skip_Long_Lines   On
    Buffer_Max_Size   32k

# ============================================================================
# INPUT: Service Log
# ============================================================================
# Monitors the systemd service log for the runner service
# Captures startup, restart, and service-level errors
# ============================================================================
[INPUT]
    Name              tail
    Tag               gha.service
    Path              /var/log/gha/gha-runner.service.log
    Refresh_Interval  1
    Read_from_Head    false
    Skip_Long_Lines   On
    Buffer_Max_Size   32k

# ============================================================================
# INPUT: Cloud-Init Log
# ============================================================================
# Monitors cloud-init output for EC2 instance initialization debugging
# Useful for troubleshooting user-data script failures
# ============================================================================
[INPUT]
    Name              tail
    Tag               gha.cloudinit
    Path              /var/log/cloud-init-output.log
    Refresh_Interval  1
    Read_from_Head    true
    Skip_Long_Lines   On
    Buffer_Max_Size   32k

# ============================================================================
# OUTPUT: CloudWatch Logs
# ============================================================================
# Ships all logs to AWS CloudWatch Logs
# - Name: cloudwatch_logs = use CloudWatch Logs output plugin
# - Match: * = send all tags to CloudWatch (could be 'gha.*' for specific logs)
# - region: AWS region (auto-detected via IMDSv2)
# - log_group_name: CloudWatch Log Group (must exist or auto_create_group=On)
# - log_stream_prefix: Prefix for log streams (full name: prefix + tag)
# - auto_create_group: Automatically create log group if it doesn't exist
# - log_retention_days: How long to retain logs (0 = never expire)
# - role_arn: Optional - use specific IAM role instead of instance profile
# 
# Performance tuning:
# - workers: Number of parallel workers (increase for high volume)
# - log_key: Field to use as log message (default: 'log')
# ============================================================================
[OUTPUT]
    Name                         cloudwatch_logs
    Match                        *
    region                       $${REGION}
    log_group_name               ${cw_log_group}
    log_stream_prefix            $${INSTANCE_ID}/
    auto_create_group            On
    log_retention_days           7
    workers                      1

# ============================================================================
# Alternative OUTPUT: Local debugging
# ============================================================================
# Uncomment this section to output logs to stdout for debugging
# Useful during development or troubleshooting Fluent Bit configuration
# ============================================================================
# [OUTPUT]
#     Name   stdout
#     Match  *
#     Format json_lines
FLUENTCONF

echo "[*] Create Fluent Bit parsers configuration…"
# Custom parsers for common log formats
# Add custom parsers here if your logs have specific formats
cat > /etc/fluent-bit/parsers.conf <<PARSERS
# ============================================================================
# PARSERS Configuration
# ============================================================================
# Custom parsers for structured log formats
# Documentation: https://docs.fluentbit.io/manual/pipeline/parsers
# 
# Common parser types:
# - regex: Use regex patterns to extract fields
# - json: Parse JSON-formatted logs
# - logfmt: Parse logfmt style logs (key=value)
# ============================================================================

# Example: Parse timestamped log lines
# Format: [2024-11-02 10:30:45] Message text
[PARSER]
    Name        timestamped
    Format      regex
    Regex       ^\[(?<time>[^\]]+)\]\s+(?<message>.*)$
    Time_Key    time
    Time_Format %Y-%m-%d %H:%M:%S

# Example: Parse JSON logs
[PARSER]
    Name        json
    Format      json
    Time_Key    timestamp
    Time_Format %Y-%m-%dT%H:%M:%S.%LZ
PARSERS

echo "[*] Set Fluent Bit permissions…"
# Ensure Fluent Bit can read log files
usermod -aG ubuntu fluent-bit || true
chown -R fluent-bit:fluent-bit /var/log/gha/
chmod 644 /var/log/gha/*.log 2>/dev/null || true

echo "[*] Enable & start Fluent Bit service…"
systemctl daemon-reload
systemctl enable fluent-bit
systemctl start fluent-bit

# Verify Fluent Bit is running
if systemctl is-active --quiet fluent-bit; then
  echo "[✓] Fluent Bit is running and shipping logs to CloudWatch"
  echo "    Log Group: ${cw_log_group}"
  echo "    Log Streams: $${INSTANCE_ID}/gha.bootstrap, $${INSTANCE_ID}/gha.runner, etc."
  echo "    Expected latency: 2-5 seconds"
else
  echo "[!] Warning: Fluent Bit failed to start. Check logs with:"
  echo "    sudo journalctl -u fluent-bit -n 50"
fi

echo "[*] Enable & start services…"
systemctl daemon-reload
systemctl enable --now $${UNIT_NAME}

echo "[*] Validating CloudWatch Agent config File"

sudo jq . /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json


/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
  -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s

echo "[*] Bootstrap complete."
